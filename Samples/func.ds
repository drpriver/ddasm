function start(){
  Puts("hello");
  let t = Clock();
  for(let i = 0; i < 42; i = i+1){
    Printf2("fib1(%zu): %zu\n", i, fib1(i));
    Printf2("fib2(%zu): %zu\n", i, fib2(i));
    Printf2("fib3(%zu): %zu\n", i, fib3(i));
    Printf2("fib4(%zu): %zu\n", i, fib4(i));
  }
  Printf2("fibinner(3, 9, 4): %zu\n", fibinner(3, 9, 4));
  return Printf2("after-before: %llu\n", Clock() - t);
}


// Naive recursive implementation
function fib1(n) {
  if(n<=1) return n;
  return fib1(n-2) + fib1(n-1);
}

// Tail-recursive implementation
function fib2(n){
    return fibinner(0, 1, n);
}

function fibinner(a, b, n){
    if(n <= 0) return a;
    return fibinner(b, a+b, n-1);
}

// Iterative implementation
function fib3(n){
    let a = 0;
    let b = 1;
    for(;n > 0; n = n-1){
        let temp = b;
        b = a + b;
        a = temp;
    }
    return a;
}

// Unstructured iterative implementation
function fib4(n){
    let a = 0;
    let b = 1;
    let temp;
    label loop;
    if(n <= 0) return a;
    temp = b;
    b = a + b;
    a = temp;
    n = n - 1;
    goto loop;
}
