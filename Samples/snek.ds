#!Bin/ddasm
import SDL;
import mem;
import io;
import misc;

let gwindow;
let grenderer;
let gboard;
let gwinlose = 0;
let gsnake;
let glen;
function start(){
  let window;
  let renderer;
  let width = 400;
  let height = 400;
  let INIT_VIDEO = 0x20;
  SDL.Init(INIT_VIDEO);
  //           WINDOW_SHOWN | HIGHDPI    | RESIZABLE
  let flags = 0x00000004 | 0x00002000 | 0x00000020;
  window = SDL.CreateWindow(
    "Snek!", 
    width, height,
    flags);
  if(!window) abort;
  renderer = SDL.CreateRenderer(window, -1, 0);
  if(!renderer) abort;
  gwindow = window;
  grenderer = renderer;
  let board = mem.calloc(10*10, 8);
  gboard = board;
  let snake = mem.calloc(10*10, 8);
  gsnake = snake;
  glen = 1;
  main_loop();
  mem.free(board);
  mem.free(snake);
  SDL.DestroyRenderer(renderer);
  SDL.DestroyWindow(window);
  SDL.Quit();
}

function has_apple(board){
  for(let y = 0; y < 10; y = y + 1){
    for(let x = 0; x < 10; x = x + 1){
      let p = y*10*8+x*8+board;
      if(peek8(p) == -1){
        return true;
      }
    }
  }
  return false;
}
function place_apple(board){
  for(;;){
    let y = misc.rand() % 10;
    let x = misc.rand() % 10;
    let p = y*10*8+x*8+board;
    if(!peek8(p)){
      poke8(p, -1);
      return;
    }
  }
}

function move_snake(board, snake, x, y){
  let p;
  p = board + 10*8*y+8*x;
  let b = peek8(p);
  poke8(p, 1);
  if(b == -1){
    poke8(snake + glen*8, p);
    glen = glen + 1;
    return;
  }
  if(b == 1){
    if(glen == 10 * 10){
      gwinlose = 1;
      return;
    }
    gwinlose = 2;
    return;
  }
  let l = glen-1;
  poke8(peek8(snake), 0);
  for(let i = 0; i < l; i = i + 1){
    poke8(snake+i*8, peek8(snake+i*8+8));
  }
  poke8(snake + (glen-1)*8, p);
}

function simulate(board, x, y){
  move_snake(board, gsnake, x, y);
  if(gwinlose) return;
  let apple = has_apple(board);
  if(!apple) place_apple(board);
}

function main_loop(){
  let board = gboard;
  let event = mem.calloc(1, 128);
  let poll = true;
  let t = SDL.GetTicks();
  let trigger = 10;
  let tick = trigger-1;
  poke8(board+5*10*8+5*8, 1);
  poke8(gsnake, board+5*10*8+5*8);
  glen = 1;
  let dx = 0;
  let dy = 1;
  let x = 5;
  let y = 5;
  for(;;){
    let got_event = false;
    if(poll){
      if(!SDL.PollEvent(event)){
        tick = tick + 1;
        if(tick >= trigger){
          tick = 0;
          if(!gwinlose){
            x = x + dx;
            y = y + dy;
            if(x == -1) x = 9;
            if(y == -1) y = 9;
            if(x == 10) x = 0;
            if(y == 10) y = 0;
            simulate(board, x, y);
            render_and_present(x, y, dx, dy);
          }
        }
        // render_and_present(x, y, dx, dy);
        let t2 = SDL.GetTicks();
        let diff = t2-t;
        if(diff < 16) SDL.Delay(16-diff);
        t = SDL.GetTicks();
        poll = true;
        continue;
      }
    }
    else {
      SDL.WaitEvent(event);
      poll = true;
    }
    let type = peek4(event);
    if(type == 0x100){
      break;
    }
    else if(type == 0x401){ // mousedown
      let button = peek1(event+16);
    }
    else if(type == 0x300){ //keydown
      let sym = peek4(event+16+4);
      if(sym == 0sq) break;
      else if(sym == 0sa){
        if(dx != 1){
          dx = -1;
          dy = 0;
        }
      }
      else if(sym == 0x40000050){
        if(dx != 1){
          dx = -1;
          dy = 0;
        }
      }
      else if(sym == 0ss){
        if(dy != -1){
          dx = 0;
          dy = 1;
        }
      }
      else if(sym == 0x40000051){
        if(dy != -1){
          dx = 0;
          dy = 1;
        }
      }
      else if(sym == 0sd){
        if(dx != -1){
          dx = 1;
          dy = 0;
        }
      }
      else if(sym == 0x4000004f){
        if(dx != -1){
          dx = 1;
          dy = 0;
        }
      }
      else if(sym == 0sw){
        if(dy != 1){
          dx = 0;
          dy = -1;
        }
      }
      else if(sym == 0x40000052){
        if(dy != 1){
          dx = 0;
          dy = -1;
        }
      }
      else if(sym == 0sr){
        gwinlose = 0;
        tick = trigger-1;
        mem.set(board, 0, 10*10*8);
        x = 5;
        y = 5;
        poke8(board+5*10*8+5*8, 1);
        poke8(gsnake, board+5*10*8+5*8);
        glen = 1;
      }
    }
  }
  mem.free(event);
}

dasm "
#
# helpers
#
function peek1 1
  add rsp rsp 0p1
  write rsp 0
  memcpy rsp rarg1 1
  read rout1 rsp
  sub rsp rsp 0p1
  ret
end

function poke1 2
  add rsp rsp 0p1
  write rsp rarg2
  memcpy rarg1 rsp 1
  sub rsp rsp 0p1
  ret
end
function peek2 1
  add rsp rsp 0p1
  write rsp 0
  memcpy rsp rarg1 2
  read rout1 rsp
  sub rsp rsp 0p1
  ret
end

function poke2 2
  add rsp rsp 0p1
  write rsp rarg2
  memcpy rarg1 rsp 2
  sub rsp rsp 0p1
  ret
end
function peek4 1
  add rsp rsp 0p1
  write rsp 0
  memcpy rsp rarg1 4
  read rout1 rsp
  sub rsp rsp 0p1
  ret
end

function poke4 2
  add rsp rsp 0p1
  write rsp rarg2
  memcpy rarg1 rsp 4
  sub rsp rsp 0p1
  ret
end
function peek8 1
  read rout1 rarg1
  ret
end

function poke8 2
  write rarg1 rarg2
  ret
end
function draw_rect
# rarg1: renderer
# rarg2: x
# rarg3: y
# rarg4: w
# rarg5: h
# assumes you can write to top 16 bytes of stack
    shl rarg3 rarg3 32
    or rarg2 rarg2 rarg3
    write rsp rarg2
    shl rarg5 rarg5 32
    or rarg4 rarg4 rarg5
    add rarg2 rsp 8
    write rarg2 rarg4 
    move rarg2 rsp
    call function SDL.RenderFillRect
    ret
end
";

function render_and_present(sx, sy, dx, dy){
  let w = 640;
  let h = 480;
  let window = gwindow;
  let renderer = grenderer;
  let board = gboard;
  let winlose = gwinlose;
  SDL.GetWindowSize(window, &w, &h);
  SDL.SetRenderDrawColor(renderer, 0, 0, 0, 0xff);
  SDL.RenderClear(renderer);
  SDL.SetRenderDrawColor(renderer, 0xff, 0xff, 0, 0xff);
  let ww = w/20;
  let hh = h/20;
  if(winlose == 1){
    SDL.SetRenderDrawColor(renderer, 0, 0xff, 0, 0xff);
    draw_rect(renderer, 3*ww, 1*hh, ww, hh);
    draw_rect(renderer, 3*ww, 2*hh, ww, hh);
    draw_rect(renderer, 3*ww, 3*hh, ww, hh);
    draw_rect(renderer, 5*ww, 1*hh, ww, hh);
    draw_rect(renderer, 5*ww, 2*hh, ww, hh);
    draw_rect(renderer, 5*ww, 3*hh, ww, hh);
    draw_rect(renderer, 4*ww, 4*hh, ww, hh);
    draw_rect(renderer, 4*ww, 5*hh, ww, hh);

    draw_rect(renderer, 7*ww, 1*hh, ww, hh);
    draw_rect(renderer, 7*ww, 2*hh, ww, hh);
    draw_rect(renderer, 7*ww, 3*hh, ww, hh);
    draw_rect(renderer, 7*ww, 4*hh, ww, hh);
    draw_rect(renderer, 7*ww, 5*hh, ww, hh);
    draw_rect(renderer, 8*ww, 1*hh, ww, hh);
    draw_rect(renderer, 8*ww, 5*hh, ww, hh);
    draw_rect(renderer, 9*ww, 1*hh, ww, hh);
    draw_rect(renderer, 9*ww, 2*hh, ww, hh);
    draw_rect(renderer, 9*ww, 3*hh, ww, hh);
    draw_rect(renderer, 9*ww, 4*hh, ww, hh);
    draw_rect(renderer, 9*ww, 5*hh, ww, hh);

    draw_rect(renderer, 11*ww, 1*hh, ww, hh);
    draw_rect(renderer, 11*ww, 2*hh, ww, hh);
    draw_rect(renderer, 11*ww, 3*hh, ww, hh);
    draw_rect(renderer, 11*ww, 4*hh, ww, hh);
    draw_rect(renderer, 11*ww, 5*hh, ww, hh);
    draw_rect(renderer, 12*ww, 5*hh, ww, hh);
    draw_rect(renderer, 13*ww, 1*hh, ww, hh);
    draw_rect(renderer, 13*ww, 2*hh, ww, hh);
    draw_rect(renderer, 13*ww, 3*hh, ww, hh);
    draw_rect(renderer, 13*ww, 4*hh, ww, hh);
    draw_rect(renderer, 13*ww, 5*hh, ww, hh);

    draw_rect(renderer, 2*ww, 7*hh, ww, hh);
    draw_rect(renderer, 2*ww, 8*hh, ww, hh);
    draw_rect(renderer, 2*ww, 9*hh, ww, hh);
    draw_rect(renderer, 2*ww, 10*hh, ww, hh);
    draw_rect(renderer, 2*ww, 11*hh, ww, hh);
    draw_rect(renderer, 3*ww, 11*hh, ww, hh);
    draw_rect(renderer, 4*ww, 7*hh, ww, hh);
    draw_rect(renderer, 4*ww, 8*hh, ww, hh);
    draw_rect(renderer, 4*ww, 9*hh, ww, hh);
    draw_rect(renderer, 4*ww, 10*hh, ww, hh);
    draw_rect(renderer, 4*ww, 11*hh, ww, hh);
    draw_rect(renderer, 5*ww, 11*hh, ww, hh);
    draw_rect(renderer, 6*ww, 7*hh, ww, hh);
    draw_rect(renderer, 6*ww, 8*hh, ww, hh);
    draw_rect(renderer, 6*ww, 9*hh, ww, hh);
    draw_rect(renderer, 6*ww, 10*hh, ww, hh);
    draw_rect(renderer, 6*ww, 11*hh, ww, hh);

    draw_rect(renderer, 8*ww, 7*hh, ww, hh);
    draw_rect(renderer, 10*ww, 7*hh, ww, hh);
    draw_rect(renderer, 9*ww, 7*hh, ww, hh);
    draw_rect(renderer, 9*ww, 8*hh, ww, hh);
    draw_rect(renderer, 9*ww, 9*hh, ww, hh);
    draw_rect(renderer, 9*ww, 10*hh, ww, hh);
    draw_rect(renderer, 9*ww, 11*hh, ww, hh);
    draw_rect(renderer, 8*ww, 11*hh, ww, hh);
    draw_rect(renderer, 10*ww, 11*hh, ww, hh);

    draw_rect(renderer, 12*ww, 7*hh, ww, hh);
    draw_rect(renderer, 12*ww, 8*hh, ww, hh);
    draw_rect(renderer, 12*ww, 9*hh, ww, hh);
    draw_rect(renderer, 12*ww, 10*hh, ww, hh);
    draw_rect(renderer, 12*ww, 11*hh, ww, hh);
    draw_rect(renderer, 13*ww, 8*hh, ww, hh);
    draw_rect(renderer, 14*ww, 9*hh, ww, hh);
    draw_rect(renderer, 15*ww, 10*hh, ww, hh);
    draw_rect(renderer, 16*ww, 7*hh, ww, hh);
    draw_rect(renderer, 16*ww, 8*hh, ww, hh);
    draw_rect(renderer, 16*ww, 9*hh, ww, hh);
    draw_rect(renderer, 16*ww, 10*hh, ww, hh);
    draw_rect(renderer, 16*ww, 11*hh, ww, hh);


  }
  else if(winlose == 2){
    SDL.SetRenderDrawColor(renderer, 0xff, 0, 0, 0xff);
    //....................
    //...#.#.###.#.#......
    //...#.#.#.#.#.#......
    //...#.#.#.#.#.#......
    //....#..#.#.#.#......
    //....#..###.###......
    //....................
    //..#...###.###.###...
    //..#...#.#.#...#.....
    //..#...#.#.###.###...
    //..#...#.#...#.#.....
    //..###.###.###.###...
    //....................
    //....................
    //....................
    //....................
    //....................
    //....................
    //....................
    //....................
    draw_rect(renderer, 3*ww, 1*hh, ww, hh);
    draw_rect(renderer, 3*ww, 2*hh, ww, hh);
    draw_rect(renderer, 3*ww, 3*hh, ww, hh);
    draw_rect(renderer, 5*ww, 1*hh, ww, hh);
    draw_rect(renderer, 5*ww, 2*hh, ww, hh);
    draw_rect(renderer, 5*ww, 3*hh, ww, hh);
    draw_rect(renderer, 4*ww, 4*hh, ww, hh);
    draw_rect(renderer, 4*ww, 5*hh, ww, hh);

    draw_rect(renderer, 7*ww, 1*hh, ww, hh);
    draw_rect(renderer, 7*ww, 2*hh, ww, hh);
    draw_rect(renderer, 7*ww, 3*hh, ww, hh);
    draw_rect(renderer, 7*ww, 4*hh, ww, hh);
    draw_rect(renderer, 7*ww, 5*hh, ww, hh);
    draw_rect(renderer, 8*ww, 1*hh, ww, hh);
    draw_rect(renderer, 8*ww, 5*hh, ww, hh);
    draw_rect(renderer, 9*ww, 1*hh, ww, hh);
    draw_rect(renderer, 9*ww, 2*hh, ww, hh);
    draw_rect(renderer, 9*ww, 3*hh, ww, hh);
    draw_rect(renderer, 9*ww, 4*hh, ww, hh);
    draw_rect(renderer, 9*ww, 5*hh, ww, hh);

    draw_rect(renderer, 11*ww, 1*hh, ww, hh);
    draw_rect(renderer, 11*ww, 2*hh, ww, hh);
    draw_rect(renderer, 11*ww, 3*hh, ww, hh);
    draw_rect(renderer, 11*ww, 4*hh, ww, hh);
    draw_rect(renderer, 11*ww, 5*hh, ww, hh);
    draw_rect(renderer, 12*ww, 5*hh, ww, hh);
    draw_rect(renderer, 13*ww, 1*hh, ww, hh);
    draw_rect(renderer, 13*ww, 2*hh, ww, hh);
    draw_rect(renderer, 13*ww, 3*hh, ww, hh);
    draw_rect(renderer, 13*ww, 4*hh, ww, hh);
    draw_rect(renderer, 13*ww, 5*hh, ww, hh);

    draw_rect(renderer, 2*ww, 7*hh, ww, hh);
    draw_rect(renderer, 2*ww, 8*hh, ww, hh);
    draw_rect(renderer, 2*ww, 9*hh, ww, hh);
    draw_rect(renderer, 2*ww, 10*hh, ww, hh);
    draw_rect(renderer, 2*ww, 11*hh, ww, hh);
    draw_rect(renderer, 3*ww, 11*hh, ww, hh);
    draw_rect(renderer, 4*ww, 11*hh, ww, hh);

    draw_rect(renderer, 6*ww, 7*hh, ww, hh);
    draw_rect(renderer, 6*ww, 8*hh, ww, hh);
    draw_rect(renderer, 6*ww, 9*hh, ww, hh);
    draw_rect(renderer, 6*ww, 10*hh, ww, hh);
    draw_rect(renderer, 6*ww, 11*hh, ww, hh);
    draw_rect(renderer, 7*ww, 7*hh, ww, hh);
    draw_rect(renderer, 7*ww, 11*hh, ww, hh);
    draw_rect(renderer, 8*ww, 7*hh, ww, hh);
    draw_rect(renderer, 8*ww, 8*hh, ww, hh);
    draw_rect(renderer, 8*ww, 9*hh, ww, hh);
    draw_rect(renderer, 8*ww, 10*hh, ww, hh);
    draw_rect(renderer, 8*ww, 11*hh, ww, hh);

    draw_rect(renderer, 10*ww, 7*hh, ww, hh);
    draw_rect(renderer, 10*ww, 8*hh, ww, hh);
    draw_rect(renderer, 10*ww, 9*hh, ww, hh);
    draw_rect(renderer, 10*ww, 11*hh, ww, hh);
    draw_rect(renderer, 11*ww, 7*hh, ww, hh);
    draw_rect(renderer, 11*ww, 9*hh, ww, hh);
    draw_rect(renderer, 11*ww, 11*hh, ww, hh);
    draw_rect(renderer, 12*ww, 7*hh, ww, hh);
    draw_rect(renderer, 12*ww, 9*hh, ww, hh);
    draw_rect(renderer, 12*ww, 10*hh, ww, hh);
    draw_rect(renderer, 12*ww, 11*hh, ww, hh);

    draw_rect(renderer, 14*ww, 7*hh, ww, hh);
    draw_rect(renderer, 14*ww, 8*hh, ww, hh);
    draw_rect(renderer, 14*ww, 9*hh, ww, hh);
    draw_rect(renderer, 14*ww, 10*hh, ww, hh);
    draw_rect(renderer, 14*ww, 11*hh, ww, hh);
    draw_rect(renderer, 15*ww, 7*hh, ww, hh);
    draw_rect(renderer, 15*ww, 9*hh, ww, hh);
    draw_rect(renderer, 15*ww, 11*hh, ww, hh);
    draw_rect(renderer, 16*ww, 7*hh, ww, hh);
    draw_rect(renderer, 16*ww, 9*hh, ww, hh);
    draw_rect(renderer, 16*ww, 11*hh, ww, hh);


  }
  else {
    let rw = w/10;
    let rh = h/10;
    for(let y = 0; y < 10; y = y + 1){
      for(let x = 0; x < 10; x = x + 1){
        let p = y*10*8+x*8+board;
        let val = peek8(p);
        if((x == sx) & (y == sy)){
          SDL.SetRenderDrawColor(renderer, 0x0, 0xff, 0xff, 0xff);
        }
        else if(!val) {
            SDL.SetRenderDrawColor(renderer, 0x0, 0x0, 0xff, 0xff);
        }
        else if(val == -1){
          SDL.SetRenderDrawColor(renderer, 0xff, 0x0, 0x0, 0xff);
        }
        else {
          SDL.SetRenderDrawColor(renderer, 0x0, 0xff, 0x0, 0xff);
        }
        draw_rect(renderer, x*rw, y*rh, rw, rh);
      }
    }
  }
  SDL.RenderPresent(renderer);
}
