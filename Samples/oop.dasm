# This demo shows how you could implement a basic object system
# if you wanted to. Maybe we'll add this to the interpreter
# so that the method look up happens in native code.

# for this demo, a printer is something that responds to make as a class method
# and free, setpref and print as regular methods.
var printerClass [
    0Sfree function freePrinter
    0Smake function makePrinter
    0Ssetpref function setPref
    0Sprint function printerPrint
    0]

# Note that these vtables are in different order - demonstrating
# that you can have duck-typed dispatch.
var secondClass [
    0Ssetpref function setPref
    0Sprint function otherPrinterPrint
    0Sfree function freePrinter
    0Smake function makeOtherPrinter
    0]

var thirdClass [
    0Sprint function thirdPrinterPrint
    0Ssetpref function setPref
    0Sfree function freePrinter
    0Smake function makeThirdPrinter
    0]

# arg1: class
# arg2: method
# arg3: instance (optional)
# arg4: argument (optional)
#
# Class is an array that is laid out
# [methid function methid function ... 0]
# Note the 0 terminator.
function classinvoke 4
    push r0

    label loop
    read r0 rarg1
    cmp r0 0
    cmov eq rip label error

    cmp r0 rarg2
    cmov eq rip label callmeth
    add rarg1 rarg1 0p2
    move rip label loop

    label callmeth
    add rarg1 rarg1 USIZE
    read r0 rarg1
    move rarg1 rarg3
    move rarg2 rarg4
    call r0

    label leave
    pop r0
    ret

    label error
    abort
end

# arg1: instance
# arg2: method
# arg3: argument
function invoke 3
    move rarg4 rarg3
    move rarg3 rarg1
    read rarg1 rarg1
    # leave rarg2 in place
    call function classinvoke
    ret
end

function freePrinter 1
    move rarg2 0p3
    call function Free
    ret
end

# rout1: instance of a printer
function makePrinter 0
    move rarg2 3
    mul rarg2 rarg2 USIZE
    move rarg1 1
    call function Calloc
    add rout2 rout1 USIZE
    move rarg2 ""
    write rout2 rarg2 # the first data member is prefix, set it to ""
    # the instance is now in rout1
    read rout2 var printerClass
    write rout1 rout2 # set the first thing to the class
    ret
end

# rout1: instance of an otherPrinter
function makeOtherPrinter 0
    move rarg2 0p3
    move rarg1 1
    call function Calloc
    add rout2 rout1 0p1
    move rarg2 ""
    write rout2 rarg2 # the first data member is prefix, set it to ""
    # the instance is now in rout1
    read rout2 var secondClass
    write rout1 rout2 # set the first thing to the class
    ret
end

# rout1: instance of a printer
function makeThirdPrinter 0
    move rarg2 0p3
    move rarg1 1
    call function Calloc
    add rout2 rout1 0p1
    move rarg2 ""
    write rout2 rarg2 # the first data member is prefix, set it to ""
    # the instance is now in rout1
    read rout2 var thirdClass
    write rout1 rout2 # set the first thing to the class
    ret
end

# arg1: a printer instance
# arg2: A string prefix
function setPref 2
    add rarg1 rarg1 0p1
    write rarg1 rarg2
    ret
end

# arg1: a printer instance
# arg2: A string postfix
function printerPrint 2
    push r0
    add r0 rarg1 0p1

    move rarg4 rarg2
    move rarg1 "Printer: %s (\e[94m%ld\e[39m): %s\n"
    read rarg2 r0
    add  rarg3 r0 0p1
    read rarg3 rarg3
    add  rarg3 rarg3 1
    add  r0 r0 0p1
    write r0 rarg3
    call function Printf4
    pop r0
    ret
end

# arg1: a otherPrinter instance
# arg2: A string postfix
function otherPrinterPrint 2
    push r0
    push rarg1
    push rarg2
    call function printerPrint
    pop rarg2
    pop rarg1
    add r0 rarg1 0p1

    move rarg4 rarg2
    move rarg1 "OtherPrinter: %s (\e[95m%ld\e[39m): %s\n"
    read rarg2 r0
    add  rarg3 r0 0p1
    read rarg3 rarg3
    add  rarg3 rarg3 1
    add  r0 r0 0p1
    write r0 rarg3
    call function Printf4
    pop r0
    ret
end

# arg1: a thirdPrinter instance
# arg2: A string postfix
function thirdPrinterPrint 2
    push r0
    push rarg1
    push rarg2
    call function otherPrinterPrint
    pop  rarg2
    pop  rarg1
    add r0 rarg1 0p1

    move rarg3 rarg2
    move rarg1 "%s ThirdPrinter: %s\n"
    read rarg2 r0
    call function Printf3
    pop r0
    ret
end

# rarg1: a printerClass
function useprinter 1
    push r0
    push r4

    move rarg2 0smake
    call function classinvoke

    move r0 rout1 # instance
    move r4 "Amazing!"

    move rarg1 r0
    move rarg2 0Ssetpref
    move rarg3 "\e[92m<<<Wow>>>\e[39m"
    call function invoke

    move rarg1 r0
    move rarg2 0Sprint
    move rarg3 r4
    call function invoke

    move rarg1 r0
    move rarg2 0Sprint
    move rarg3 r4
    call function invoke

    move rarg1 r0
    move rarg2 0Sprint
    move rarg3 r4
    call function invoke

    move rarg1 r0
    move rarg2 0Ssetpref
    move rarg3 "\e[91m(((WOW)))\e[39m"
    call function invoke

    move rarg1 r0
    move rarg2 0Sprint
    move rarg3 r4
    call function invoke

    move rarg1 r0
    move rarg2 0Sfree
    call function invoke

    pop r4
    pop r0

    ret
end

function start 0
    read r0 var printerClass
    move rarg1 r0
    call function useprinter
    move rarg1 "=*= Success 1! =*="
    call function Puts
    move rarg1 r0
    call function useprinter
    move rarg1 "=*= Success 2! =*="
    call function Puts

    read r0 var secondClass
    move rarg1 r0
    call function useprinter
    move rarg1 "=*= Success 3! =*="
    call function Puts
    move rarg1 r0
    call function useprinter
    move rarg1 "=*= Success 4! =*="
    call function Puts

    read r0 var thirdClass
    move rarg1 r0
    call function useprinter
    move rarg1 "=*= Success 5! =*="
    call function Puts
    move rarg1 r0
    call function useprinter
    move rarg1 "=*= Success 6! =*="
    call function Puts

    halt
end
